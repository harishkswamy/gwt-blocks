// Copyright 2008 Harish Krishnaswamy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package gwtBlocks.client.models;

import gwtBlocks.client.StringConverter;

/**
 * This model binds a single value held in this model to a single property in the domain object held by the contained
 * bean model.
 * 
 * @author hkrishna
 */
public abstract class PropertyBindingModel<V> extends InputModel<V>
{
    protected PropertyBindingModel(String key, BeanBindingModel<?> parent, StringConverter<V> propertyConverter)
    {
        super(key, parent);

        if (parent == null)
            throw new IllegalArgumentException(this + " needs a non null BeanBindingModel parent.");

        setConverter(propertyConverter);

        // In case this property model is created after the bean model value is set.
        parentValueChanged();
    }

    @Override
    public void setParent(String key, CompositeModel<?> parent)
    {
        if (!(parent instanceof BeanBindingModel))
            throw new IllegalArgumentException(this + " only accepts BeanBindingModel as parent. Argument:" + parent);

        super.setParent(key, parent);
    }

    @Override
    public void parentValueChanged()
    {
        super.parentValueChanged();

        BeanBindingModel<?> beanModel = getParent();

        if (beanModel.getValue() == null)
            setValue(null);
        else
            setValue(getPropertyValue());
    }

    @Override
    protected void beforeNotifyChangeListeners()
    {
        super.beforeNotifyChangeListeners();

        BeanBindingModel<?> parent = getParent();

        if (parent.isAutoCommit())
            commit();
    }

    /**
     * This method will commit the value in this model to the bean model.
     */
    public void commit()
    {
        if (getParent().getValue() != null)
            setPropertyValue();
    }

    /**
     * This method will be generated by BeanBindingModelGenerator during GWT's rebind phase.
     */
    protected abstract void setPropertyValue();

    /**
     * This method will be generated by BeanBindingModelGenerator during GWT's rebind phase.
     */
    protected abstract V getPropertyValue();
}
